@page "/"
@using TaskManagerClient.Services
@using TaskManagerClient.Models

@inject ITaskReader TaskReader 
@inject ITaskWriter TaskWriter 

<h2>Tareas</h2>

@if (showDeleteSuccess)
{
    <div class="alert alert-success">
        ¡Tarea eliminada exitosamente!
    </div>
}

@if (showDeleteConfirm)
{
    <div class="alert alert-danger">
        <strong>¿Estás seguro que deseas eliminar esta tarea?</strong>
        <div class="mt-2">
            <button class="btn btn-danger btn-sm me-2" @onclick="ConfirmDelete">Sí</button>
            <button class="btn btn-secondary btn-sm" @onclick="CancelDelete">Cancelar</button>
        </div>
    </div>
}


@if (tasks is null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <ul class="list-group">
        @foreach (var t in tasks)
        {
            <li class="list-group-item">
                <div class="d-flex justify-content-between">
                    <span>
                        <input type="checkbox" 
                               checked="@t.IsDone" 
                               disabled="@t.IsDone" 
                               @onchange="@(e => OnCheckChanged(e, t))" />
                        <strong>@t.Title</strong> (@(t.IsDone ? "✔ Completada" : "❌ Pendiente"))
                    </span>
                    <button class="btn btn-danger btn-sm" @onclick="@(() => AskDelete(t.id))">Eliminar</button>
                </div>
                @if (!string.IsNullOrWhiteSpace(t.Description))
                {
                    <p class="mb-0 text-muted">@t.Description</p>
                }
            </li>
        }
    </ul>
    <TaskForm OnSaved="Refresh" />
}

@code {
    List<TaskItem>? tasks;

    protected override async Task OnInitializedAsync() => await Refresh();

    private bool showDeleteSuccess = false;
    private bool showDeleteConfirm = false;
    private Guid taskToDelete;


    async Task Refresh()
    {
        tasks = (await TaskReader.GetAllAsync()).ToList();
    }
        
        void AskDelete(Guid id)
    {
        taskToDelete = id;
        showDeleteConfirm = true;
    }

    void CancelDelete()
    {
        showDeleteConfirm = false;
        taskToDelete = Guid.Empty;
    }

    async Task ConfirmDelete()
    {
        showDeleteConfirm = false; 
        StateHasChanged(); 
        await Task.Delay(200); 

        await TaskWriter.DeleteAsync(taskToDelete);
        taskToDelete = Guid.Empty;

        showDeleteSuccess = true;
        await Refresh();

        await Task.Delay(1000);
        showDeleteSuccess = false;
        StateHasChanged();
    }

    async Task Delete(Guid id)
    {
        await TaskWriter.DeleteAsync(id);
        showDeleteSuccess = true;
        await Refresh();

        await Task.Delay(5000);
        showDeleteSuccess = false;
        StateHasChanged();
    }

    async Task OnCheckChanged(ChangeEventArgs e, TaskItem task)
    {
        bool marcado = (bool)e.Value!;
        
        if (marcado && !task.IsDone)
        {
            // Solo si se está marcando como completada
            var updated = new TaskItem
            {
                id = task.id,
                Title = task.Title,
                Description = task.Description,
                IsDone = true
            };

            await TaskWriter.UpdateAsync(updated);
            task.IsDone = true;
            StateHasChanged();
        }
    }
}
